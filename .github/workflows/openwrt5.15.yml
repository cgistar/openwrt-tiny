name: OpenWrt-5.15

on:
  workflow_dispatch:
  schedule:
    - cron: 0 19 */5 * *

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: 5.15.config
  DIY_P1_SH: diy5.15.sh
  DIY_P2_SH: diy.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: 检查项目分支
      uses: actions/checkout@main

    - name: 安装编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        df -hT $PWD
        sudo swapoff -a
        sudo rm -f /swapfile
        sudo apt clean
        sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev libfuse-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo chown $USER:$GROUPS $GITHUB_WORKSPACE

    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: 下载固件源码
      working-directory: ./
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV

    - name: 加载自定义设置
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 下载插件
      run: cd openwrt && ./scripts/feeds update -a

    - name: 读取插件
      run: cd openwrt && ./scripts/feeds install -a

    - name: 更改设置
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 下载安装包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 开始编译固件
      id: compile
      run: |
        cd openwrt
        curl -fsSL https://raw.githubusercontent.com/sirpdboy/other/master/patch/poweroff/poweroff.htm > ./feeds/luci/modules/luci-mod-admin-full/luasrc/view/admin_system/poweroff.htm
        curl -fsSL https://raw.githubusercontent.com/sirpdboy/other/master/patch/poweroff/system.lua > ./feeds/luci/modules/luci-mod-admin-full/luasrc/controller/admin/system.lua
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "FILE_TIME=$(date "+%Y年%m月%d日")" >> $GITHUB_ENV
        echo "TAG_TIME=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV

    - name: 查看磁盘使用情况
      if: (!cancelled())
      run: df -hT

    - name: 整理编译好的固件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages && mkdir packages
        find -name "*esxi-flat.vmdk*" | xargs -i mv -f {} packages
        find -name "*kernel.bin*" | xargs -i mv -f {} packages
        find -name "*rootfs*" | xargs -i mv -f {} packages
        find -name "*.manifest*" | xargs -i mv -f {} packages
        find -name "*vmlinuz*" | xargs -i mv -f {} packages
        find -name "*esxi.vmdk*" | xargs -i mv -f {} packages
        find -name "*buildinfo*" | xargs -i mv -f {} packages
        find -name "*json*" | xargs -i mv -f {} packages
        find -name "*sha256sums*" | xargs -i mv -f {} packages
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件到github
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt-5.15${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 发布至release
      id: release
      uses: ncipollo/release-action@v1
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        name: ${{ env.FILE_TIME }} openwrt-5.15-x86-64
        allowUpdates: true
        tag: ${{ env.TAG_TIME }}
        commit: main
        token: ${{ secrets.RELEASE_TOKEN }}
        body: |
          OpenWrt-5.15_x86_64-个性编译版（支持ipv6）
          默认地址：192.168.5.100
          默认密码：无密码
          插件清单：ZeroTier WireGuard ttyd lucky ShellCrash...
          安装ShellCrash：sh /etc/ShellCrash/setup.sh
        artifacts: ${{ env.FIRMWARE }}/*

    - name: 清理编译流程
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 50
        keep_minimum_runs: 10

    - name: 删除旧的Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 5
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
